interface BankInterface{

	abstract double getbal();

	abstract double getintrest();

	abstract void display();	

}

class BankA implements  BankInterface{



	private double bal;

	 public BankA(double balance) {

	        this.bal = balance;

	    }

	public double getbal() {	

		return bal;

	}

	public double getintrest() {	

		return 7.0;

	}

	public void display() {

		System.out.println("Bank A" + "Balance:" + getbal() + "Intrest rate:" + getintrest());

		

	}

	

}

class BankB implements  BankInterface{

	private double bal;

	 public BankB(double balance) {

	        this.bal = balance;

	    }

	public double getbal() {	

		return bal;

	}

	public double getintrest() {	

		return 7.4;

	}

	public void display() {

		System.out.println("Bank B" + "Balance:" + getbal() + "Intrest rate:" + getintrest());

		

	}	

}

class BankC implements  BankInterface{

	private double bal;

	 public BankC(double balance) {

	        this.bal = balance;

	    }

	public double getbal() {	

		return bal;

	}

	public double getintrest() {	

		return 7.9;

	}

	public void display() {

		System.out.println("Bank C" + "Balance:" + getbal() + "Intrest rate:" + getintrest());

		

	}

	

}





public class lab5a {



	 

	public static void main(String[] args) {

		
		BankInterface b1= new BankA(10000);

		BankInterface b2= new BankB(150000);

		BankInterface b3= new BankC(200000);

		b1.display();

		b2.display();

		b3.display();



	}



}



LAB 5B

  import java.util.Scanner;

interface WaterConservationSystem {

    int calculateTrappedWater(int[] blockHeights);

}

abstract class RainySeasonConservation implements WaterConservationSystem {

    public abstract int calculateTrappedWater(int[] blockHeights);

}

class CityBlockConservation extends RainySeasonConservation {

    public int calculateTrappedWater(int[] blockHeights) {

        if (blockHeights == null || blockHeights.length < 3 ) {

            return 0;

        }

        int sum = 0;

        int lMax = 0;

        int rMax = 0;

        int i = 0;

        int j = blockHeights.length - 1;



        while (i < j) {

            lMax = Math.max(lMax, blockHeights[i]);

            rMax = Math.max(rMax, blockHeights[j]);



            if (lMax < rMax) {

                sum =sum + (lMax - blockHeights[i]);

                i++;

            } else {

                sum =sum + (rMax - blockHeights[j]);

                j--;

            }

        }

        return sum;

    }

}



public class LAB5B {

	@SuppressWarnings("resource")
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);  
		int n;

		WaterConservationSystem ob = new CityBlockConservation();
          

System.out.print("Enter the number of elements you want to store: ");  
n=sc.nextInt();   
int[] blockHeights1 = new int[10];  
System.out.println("Enter the elements of the array: ");  
for(int i=0; i<n; i++)  
{  
  
blockHeights1[i]=sc.nextInt();  
}  


 System.out.println("Total water Trapped: " + ob.calculateTrappedWater(blockHeights1)); 

		}
}
